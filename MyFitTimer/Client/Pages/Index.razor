@page "/"
@inject IStopwatcherService StopwatcherService
@inject IJSRuntime JSRuntime
@implements IDisposable


<h1 style="color:purple;"> <b>Team SLAm Dunk Fitness Timer Web Application</b></h1>

<br />
<h2>Time: @currentTime</h2>
<button class="btn btn-primary" @onclick="Start">Start Timer</button>
<button class="btn btn-primary" @onclick="Stop">Stop Timer</button>
<br />

@if (StopwatcherService.Latest.Id == 0)
{
    <h2>No Saved Times</h2>
}
else
{
    <h2>Previous Time: @TimeSpan.FromTicks(StopwatcherService.Latest.Time)</h2>
}

<br />
<h4>
    By

    <br /> Logan Heddens
    <br /> Sarah Valle
    <br /> Amy Collier
</h4>
<br />

@code{
    TimeSpan currentTime;
    StopwatchTracker stopWatch = new StopwatchTracker();

    public async Task Start()
    {
        stopWatch.Restart();

        while (stopWatch.Running() == true)
        {
            if (stopWatch.Running() == true)
            {
                await Task.Delay(1000);
                currentTime = stopWatch.GetElapsed();
                StateHasChanged();
            }
        }
    }

    public async void Stop()
    {
        stopWatch.Stop();

        Console.WriteLine("Stop was called!");
        await JSRuntime.InvokeVoidAsync("console.log", stopWatch.GetLap());
        await StopwatcherService.CreateStopwatcher(stopWatch.GetLap());

        await StopwatcherService.LatestTime();
        currentTime = stopWatch.GetElapsed();
        StopwatcherService.OnChange += StateHasChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        await StopwatcherService.LatestTime();
        StopwatcherService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        StopwatcherService.OnChange -= StateHasChanged;
    }
}
