@page "/"
@inject IStopwatcherService StopwatcherService
@inject IStopwatchTrackerService StopwatchTrackerService
@inject IJSRuntime JSRuntime
@implements IDisposable


<h1>My Fitness Timer Web Application</h1>

<br />
<h2>Time: @currentTime</h2>
<button class="btn btn-primary" @onclick="StartTimer">Start Timer</button>
<button class="btn btn-primary" @onclick="StopTimer">Stop Timer</button>
<br />

@if (StopwatcherService.Latest.Id == 0)
{
    <h2>No Saved Times</h2>
}
else
{
    <h2>Previous Time: @TimeSpan.FromTicks(StopwatcherService.Latest.Time)</h2>
}


<h3>
    By
</h3>
<h3>
    Logan Heddens
</h3>
<h3>
    Sarah Valle
</h3>
<h3>
    Amy Collier
</h3>

@code{
    protected TimeSpan currentTime = new TimeSpan(0, 0, 0);
    bool started;

    public async void StartTimer()
    {
        StopwatchTrackerService.Start();
        started = true;
        while (started == true)
        {
            await Task.Delay(500);
            StopwatchTrackerService.GetElapsed();
            currentTime = TimeSpan.FromTicks(StopwatchTrackerService.ElapsedTime.Elapsed);
            StateHasChanged();
        }
    }

    public async void StopTimer()
    {
        started = false;
        Console.WriteLine("Stop was called!");
        StopwatchTrackerService.Stop();
        await StopwatcherService.LatestTime();
        StopwatcherService.OnChange += StateHasChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        await StopwatcherService.LatestTime();
        StopwatcherService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        StopwatcherService.OnChange -= StateHasChanged;
    }
}
